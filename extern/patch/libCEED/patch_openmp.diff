diff --git a/.clang-format b/.clang-format
index 6df301e2..013a515c 100644
--- a/.clang-format
+++ b/.clang-format
@@ -27,4 +27,4 @@ IncludeCategories:
     Priority:                 7
 TabWidth:                     4
 UseTab:                       Never
-StatementMacros:              [CeedPragmaOptimizeOn, CeedPragmaOptimizeOff]
+StatementMacros:              [CeedPragmaOptimizeOn, CeedPragmaOptimizeOff, CeedPragmaThreadPrivate]
diff --git a/Makefile b/Makefile
index 428191ab..c67e0193 100644
--- a/Makefile
+++ b/Makefile
@@ -107,13 +107,18 @@ MARCHFLAG.oneAPI        := $(MARCHFLAG.clang)
 OMP_SIMD_FLAG.gcc       := -fopenmp-simd
 OMP_SIMD_FLAG.clang     := $(OMP_SIMD_FLAG.gcc)
 OMP_SIMD_FLAG.icc       := -qopenmp-simd
-OMP_SIMD_FLAG.oneAPI    := $(OMP_SIMD_FLAG.clang)
+OMP_SIMD_FLAG.oneAPI    := $(OMP_SIMD_FLAG.icc)
+OMP_FLAG.gcc            := -fopenmp
+OMP_FLAG.clang          := $(OMP_FLAG.gcc)
+OMP_FLAG.icc            := -qopenmp
+OMP_FLAG.oneAPI         := $(OMP_FLAG.icc)
 SYCL_FLAG.gcc           :=
 SYCL_FLAG.clang         := -fsycl
 SYCL_FLAG.icc           :=
 SYCL_FLAG.oneAPI        := -fsycl -fno-sycl-id-queries-fit-in-int
 OPT.gcc                 := -g -ffp-contract=fast
 OPT.clang               := $(OPT.gcc)
+OPT.icc                 := $(OPT.gcc)
 OPT.oneAPI              := $(OPT.clang)
 OPT.emcc                :=
 CFLAGS.gcc              := $(if $(STATIC),,-fPIC) -std=c99 -Wall -Wextra -Wno-unused-parameter -MMD -MP
@@ -151,6 +156,7 @@ PEDANTICFLAGS ?= -Werror -pedantic
 OPT    ?= -O $(MARCHFLAG) $(OPT.$(CC_VENDOR)) $(OMP_SIMD_FLAG)
 CFLAGS ?= $(OPT) $(CFLAGS.$(CC_VENDOR)) $(if $(PEDANTIC),$(PEDANTICFLAGS))
 CXXFLAGS ?= $(OPT) $(CXXFLAGS.$(CC_VENDOR)) $(if $(PEDANTIC),$(PEDANTICFLAGS))
+FFLAGS ?= $(OPT) $(FFLAGS.$(FC_VENDOR))
 LIBCXX ?= -lstdc++
 NVCCFLAGS ?= -ccbin $(CXX) -Xcompiler "$(OPT)" -Xcompiler -fPIC
 ifneq ($(CUDA_ARCH),)
@@ -160,10 +166,16 @@ HIPCCFLAGS ?= $(filter-out $(OMP_SIMD_FLAG),$(OPT)) -fPIC -munsafe-fp-atomics
 ifneq ($(HIP_ARCH),)
   HIPCCFLAGS += --amdgpu-target=$(HIP_ARCH)
 endif
-
 SYCL_FLAG := $(SYCL_FLAG.$(CC_VENDOR))
 SYCLFLAGS ?= $(SYCL_FLAG) -fPIC -std=c++17 $(filter-out -std=c++11,$(CXXFLAGS)) $(filter-out $(OMP_SIMD_FLAG),$(OPT))
-FFLAGS ?= $(OPT) $(FFLAGS.$(FC_VENDOR))
+
+OPENMP ?=
+ifneq ($(OPENMP),)
+	OMP_FLAG := $(OMP_FLAG.$(CC_VENDOR))
+	OMP_FLAG := $(if $(call cc_check_flag,$(OMP_FLAG)),$(OMP_FLAG))
+  CFLAGS += $(OMP_FLAG) -DCEED_USE_OPENMP
+  CEED_LDFLAGS += $(OMP_FLAG)
+endif
 
 ifeq ($(COVERAGE), 1)
   CFLAGS += --coverage
diff --git a/backends/ref/ceed-ref-restriction.c b/backends/ref/ceed-ref-restriction.c
index f69b903c..f20689d8 100644
--- a/backends/ref/ceed-ref-restriction.c
+++ b/backends/ref/ceed-ref-restriction.c
@@ -179,7 +179,8 @@ static inline int CeedElemRestrictionApplyStridedTranspose_Ref_Core(CeedElemRest
       CeedPragmaSIMD for (CeedInt k = 0; k < num_comp; k++) {
         CeedPragmaSIMD for (CeedInt n = 0; n < elem_size; n++) {
           CeedPragmaSIMD for (CeedInt j = 0; j < CeedIntMin(blk_size, num_elem - e); j++) {
-            vv[n + k * elem_size + (e + j) * elem_size * num_comp] += uu[e * elem_size * num_comp + (k * elem_size + n) * blk_size + j - v_offset];
+            CeedScalar       uu_val = uu[e * elem_size * num_comp + (k * elem_size + n) * blk_size + j - v_offset];
+            CeedPragmaAtomic vv[n + k * elem_size + (e + j) * elem_size * num_comp] += uu_val;
           }
         }
       }
@@ -192,8 +193,8 @@ static inline int CeedElemRestrictionApplyStridedTranspose_Ref_Core(CeedElemRest
       CeedPragmaSIMD for (CeedInt k = 0; k < num_comp; k++) {
         CeedPragmaSIMD for (CeedInt n = 0; n < elem_size; n++) {
           CeedPragmaSIMD for (CeedInt j = 0; j < CeedIntMin(blk_size, num_elem - e); j++) {
-            vv[n * strides[0] + k * strides[1] + (e + j) * strides[2]] +=
-                uu[e * elem_size * num_comp + (k * elem_size + n) * blk_size + j - v_offset];
+            CeedScalar       uu_val = uu[e * elem_size * num_comp + (k * elem_size + n) * blk_size + j - v_offset];
+            CeedPragmaAtomic vv[n * strides[0] + k * strides[1] + (e + j) * strides[2]] += uu_val;
           }
         }
       }
@@ -213,7 +214,8 @@ static inline int CeedElemRestrictionApplyStandardTranspose_Ref_Core(CeedElemRes
       for (CeedInt i = 0; i < elem_size * blk_size; i += blk_size) {
         // Iteration bound set to discard padding elements
         for (CeedInt j = i; j < i + CeedIntMin(blk_size, num_elem - e); j++) {
-          vv[impl->offsets[j + e * elem_size] + k * comp_stride] += uu[elem_size * (k * blk_size + e * num_comp) + j - v_offset];
+          CeedScalar       uu_val = uu[elem_size * (k * blk_size + e * num_comp) + j - v_offset];
+          CeedPragmaAtomic vv[impl->offsets[j + e * elem_size] + k * comp_stride] += uu_val;
         }
       }
     }
@@ -232,8 +234,8 @@ static inline int CeedElemRestrictionApplyOrientedTranspose_Ref_Core(CeedElemRes
       for (CeedInt i = 0; i < elem_size * blk_size; i += blk_size) {
         // Iteration bound set to discard padding elements
         for (CeedInt j = i; j < i + CeedIntMin(blk_size, num_elem - e); j++) {
-          vv[impl->offsets[j + e * elem_size] + k * comp_stride] +=
-              uu[elem_size * (k * blk_size + e * num_comp) + j - v_offset] * (impl->orients[j + e * elem_size] ? -1.0 : 1.0);
+          CeedScalar       uu_val = uu[elem_size * (k * blk_size + e * num_comp) + j - v_offset] * (impl->orients[j + e * elem_size] ? -1.0 : 1.0);
+          CeedPragmaAtomic vv[impl->offsets[j + e * elem_size] + k * comp_stride] += uu_val;
         }
       }
     }
@@ -252,29 +254,29 @@ static inline int CeedElemRestrictionApplyCurlOrientedTranspose_Ref_Core(CeedEle
       // Iteration bound set to discard padding elements
       CeedInt blk_end = CeedIntMin(blk_size, num_elem - e), n = 0;
       for (CeedInt j = 0; j < blk_end; j++) {
-        vv[impl->offsets[j + n * blk_size + e * elem_size] + k * comp_stride] +=
-            uu[e * elem_size * num_comp + (k * elem_size + n) * blk_size + j - v_offset] *
-                impl->curl_orients[j + (3 * n + 1) * blk_size + e * 3 * elem_size] +
-            uu[e * elem_size * num_comp + (k * elem_size + n + 1) * blk_size + j - v_offset] *
-                impl->curl_orients[j + (3 * n + 3) * blk_size + e * 3 * elem_size];
+        CeedScalar uu_val = uu[e * elem_size * num_comp + (k * elem_size + n) * blk_size + j - v_offset] *
+                                impl->curl_orients[j + (3 * n + 1) * blk_size + e * 3 * elem_size] +
+                            uu[e * elem_size * num_comp + (k * elem_size + n + 1) * blk_size + j - v_offset] *
+                                impl->curl_orients[j + (3 * n + 3) * blk_size + e * 3 * elem_size];
+        CeedPragmaAtomic vv[impl->offsets[j + n * blk_size + e * elem_size] + k * comp_stride] += uu_val;
       }
       for (n = 1; n < elem_size - 1; n++) {
         for (CeedInt j = 0; j < blk_end; j++) {
-          vv[impl->offsets[j + n * blk_size + e * elem_size] + k * comp_stride] +=
-              uu[e * elem_size * num_comp + (k * elem_size + n - 1) * blk_size + j - v_offset] *
-                  impl->curl_orients[j + (3 * n - 1) * blk_size + e * 3 * elem_size] +
-              uu[e * elem_size * num_comp + (k * elem_size + n) * blk_size + j - v_offset] *
-                  impl->curl_orients[j + (3 * n + 1) * blk_size + e * 3 * elem_size] +
-              uu[e * elem_size * num_comp + (k * elem_size + n + 1) * blk_size + j - v_offset] *
-                  impl->curl_orients[j + (3 * n + 3) * blk_size + e * 3 * elem_size];
+          CeedScalar uu_val = uu[e * elem_size * num_comp + (k * elem_size + n - 1) * blk_size + j - v_offset] *
+                                  impl->curl_orients[j + (3 * n - 1) * blk_size + e * 3 * elem_size] +
+                              uu[e * elem_size * num_comp + (k * elem_size + n) * blk_size + j - v_offset] *
+                                  impl->curl_orients[j + (3 * n + 1) * blk_size + e * 3 * elem_size] +
+                              uu[e * elem_size * num_comp + (k * elem_size + n + 1) * blk_size + j - v_offset] *
+                                  impl->curl_orients[j + (3 * n + 3) * blk_size + e * 3 * elem_size];
+          CeedPragmaAtomic vv[impl->offsets[j + n * blk_size + e * elem_size] + k * comp_stride] += uu_val;
         }
       }
       for (CeedInt j = 0; j < blk_end; j++) {
-        vv[impl->offsets[j + n * blk_size + e * elem_size] + k * comp_stride] +=
-            uu[e * elem_size * num_comp + (k * elem_size + n - 1) * blk_size + j - v_offset] *
-                impl->curl_orients[j + (3 * n - 1) * blk_size + e * 3 * elem_size] +
-            uu[e * elem_size * num_comp + (k * elem_size + n) * blk_size + j - v_offset] *
-                impl->curl_orients[j + (3 * n + 1) * blk_size + e * 3 * elem_size];
+        CeedScalar uu_val = uu[e * elem_size * num_comp + (k * elem_size + n - 1) * blk_size + j - v_offset] *
+                                impl->curl_orients[j + (3 * n - 1) * blk_size + e * 3 * elem_size] +
+                            uu[e * elem_size * num_comp + (k * elem_size + n) * blk_size + j - v_offset] *
+                                impl->curl_orients[j + (3 * n + 1) * blk_size + e * 3 * elem_size];
+        CeedPragmaAtomic vv[impl->offsets[j + n * blk_size + e * elem_size] + k * comp_stride] += uu_val;
       }
     }
   }
@@ -293,29 +295,29 @@ static inline int CeedElemRestrictionApplyCurlOrientedUnsignedTranspose_Ref_Core
       // Iteration bound set to discard padding elements
       CeedInt blk_end = CeedIntMin(blk_size, num_elem - e), n = 0;
       for (CeedInt j = 0; j < blk_end; j++) {
-        vv[impl->offsets[j + n * blk_size + e * elem_size] + k * comp_stride] +=
-            uu[e * elem_size * num_comp + (k * elem_size + n) * blk_size + j - v_offset] *
-                abs(impl->curl_orients[j + (3 * n + 1) * blk_size + e * 3 * elem_size]) +
-            uu[e * elem_size * num_comp + (k * elem_size + n + 1) * blk_size + j - v_offset] *
-                abs(impl->curl_orients[j + (3 * n + 3) * blk_size + e * 3 * elem_size]);
+        CeedScalar uu_val = uu[e * elem_size * num_comp + (k * elem_size + n) * blk_size + j - v_offset] *
+                                abs(impl->curl_orients[j + (3 * n + 1) * blk_size + e * 3 * elem_size]) +
+                            uu[e * elem_size * num_comp + (k * elem_size + n + 1) * blk_size + j - v_offset] *
+                                abs(impl->curl_orients[j + (3 * n + 3) * blk_size + e * 3 * elem_size]);
+        CeedPragmaAtomic vv[impl->offsets[j + n * blk_size + e * elem_size] + k * comp_stride] += uu_val;
       }
       for (n = 1; n < elem_size - 1; n++) {
         for (CeedInt j = 0; j < blk_end; j++) {
-          vv[impl->offsets[j + n * blk_size + e * elem_size] + k * comp_stride] +=
-              uu[e * elem_size * num_comp + (k * elem_size + n - 1) * blk_size + j - v_offset] *
-                  abs(impl->curl_orients[j + (3 * n - 1) * blk_size + e * 3 * elem_size]) +
-              uu[e * elem_size * num_comp + (k * elem_size + n) * blk_size + j - v_offset] *
-                  abs(impl->curl_orients[j + (3 * n + 1) * blk_size + e * 3 * elem_size]) +
-              uu[e * elem_size * num_comp + (k * elem_size + n + 1) * blk_size + j - v_offset] *
-                  abs(impl->curl_orients[j + (3 * n + 3) * blk_size + e * 3 * elem_size]);
+          CeedScalar uu_val = uu[e * elem_size * num_comp + (k * elem_size + n - 1) * blk_size + j - v_offset] *
+                                  abs(impl->curl_orients[j + (3 * n - 1) * blk_size + e * 3 * elem_size]) +
+                              uu[e * elem_size * num_comp + (k * elem_size + n) * blk_size + j - v_offset] *
+                                  abs(impl->curl_orients[j + (3 * n + 1) * blk_size + e * 3 * elem_size]) +
+                              uu[e * elem_size * num_comp + (k * elem_size + n + 1) * blk_size + j - v_offset] *
+                                  abs(impl->curl_orients[j + (3 * n + 3) * blk_size + e * 3 * elem_size]);
+          CeedPragmaAtomic vv[impl->offsets[j + n * blk_size + e * elem_size] + k * comp_stride] += uu_val;
         }
       }
       for (CeedInt j = 0; j < blk_end; j++) {
-        vv[impl->offsets[j + n * blk_size + e * elem_size] + k * comp_stride] +=
-            uu[e * elem_size * num_comp + (k * elem_size + n - 1) * blk_size + j - v_offset] *
-                abs(impl->curl_orients[j + (3 * n - 1) * blk_size + e * 3 * elem_size]) +
-            uu[e * elem_size * num_comp + (k * elem_size + n) * blk_size + j - v_offset] *
-                abs(impl->curl_orients[j + (3 * n + 1) * blk_size + e * 3 * elem_size]);
+        CeedScalar uu_val = uu[e * elem_size * num_comp + (k * elem_size + n - 1) * blk_size + j - v_offset] *
+                                abs(impl->curl_orients[j + (3 * n - 1) * blk_size + e * 3 * elem_size]) +
+                            uu[e * elem_size * num_comp + (k * elem_size + n) * blk_size + j - v_offset] *
+                                abs(impl->curl_orients[j + (3 * n + 1) * blk_size + e * 3 * elem_size]);
+        CeedPragmaAtomic vv[impl->offsets[j + n * blk_size + e * elem_size] + k * comp_stride] += uu_val;
       }
     }
   }
diff --git a/include/ceed/backend.h b/include/ceed/backend.h
index 76c464d4..e6816eee 100644
--- a/include/ceed/backend.h
+++ b/include/ceed/backend.h
@@ -58,6 +58,21 @@
 #endif
 #endif
 
+/// This macro provides the appropriate OpenMP Pragmas for the compilation environment.
+/// @ingroup Ceed
+#ifdef CEED_USE_OPENMP
+#ifndef CeedPragmaAtomic
+#define CeedPragmaAtomic _Pragma("omp atomic update")
+#endif
+#ifndef CeedPragmaThreadPrivate
+#define CeedPragma(x) _Pragma(#x)
+#define CeedPragmaThreadPrivate(x) CeedPragma(omp threadprivate(x))
+#endif
+#else
+#define CeedPragmaAtomic
+#define CeedPragmaThreadPrivate(x)
+#endif
+
 /**
   This enum supples common colors for CeedDebug256 debugging output.
   Set the environment variable `CEED_DEBUG = 1` to activate debugging output.
diff --git a/interface/ceed-operator.c b/interface/ceed-operator.c
index 47023c19..cbdfcb51 100644
--- a/interface/ceed-operator.c
+++ b/interface/ceed-operator.c
@@ -1493,8 +1493,8 @@ int CeedOperatorApply(CeedOperator op, CeedVector in, CeedVector out, CeedReques
         }
       }
       // Apply
-      for (CeedInt i = 0; i < op->num_suboperators; i++) {
-        CeedCall(CeedOperatorApplyAdd(op->sub_operators[i], in, out, request));
+      for (CeedInt i = 0; i < num_suboperators; i++) {
+        CeedCall(CeedOperatorApplyAdd(sub_operators[i], in, out, request));
       }
     }
   } else {
diff --git a/interface/ceed-qfunction-register.c b/interface/ceed-qfunction-register.c
index b9e57f51..40d2fb5a 100644
--- a/interface/ceed-qfunction-register.c
+++ b/interface/ceed-qfunction-register.c
@@ -10,6 +10,7 @@
 #include <stdbool.h>
 
 static bool register_all_called;
+CeedPragmaThreadPrivate(register_all_called)
 
 #define CEED_GALLERY_QFUNCTION(name) CEED_INTERN int name(void);
 #include "../gallery/ceed-gallery-list.h"
diff --git a/interface/ceed-qfunction.c b/interface/ceed-qfunction.c
index 6cbc15dd..29dc0363 100644
--- a/interface/ceed-qfunction.c
+++ b/interface/ceed-qfunction.c
@@ -37,7 +37,9 @@ static struct {
   CeedQFunctionUser f;
   int (*init)(Ceed ceed, const char *name, CeedQFunction qf);
 } gallery_qfunctions[1024];
+CeedPragmaThreadPrivate(gallery_qfunctions)
 static size_t num_qfunctions;
+CeedPragmaThreadPrivate(num_qfunctions)
 /// @endcond
 
 /// ----------------------------------------------------------------------------
diff --git a/interface/ceed-register.c b/interface/ceed-register.c
index e47221e9..8177d3ae 100644
--- a/interface/ceed-register.c
+++ b/interface/ceed-register.c
@@ -10,6 +10,7 @@
 #include <stdbool.h>
 
 static bool register_all_called;
+CeedPragmaThreadPrivate(register_all_called)
 
 #define CEED_BACKEND(name, ...) CEED_INTERN int name(void);
 #include "../backends/ceed-backend-list.h"
diff --git a/interface/ceed.c b/interface/ceed.c
index 7ba7214d..f4ec33c8 100644
--- a/interface/ceed.c
+++ b/interface/ceed.c
@@ -26,7 +26,9 @@ static struct {
   int (*init)(const char *resource, Ceed f);
   unsigned int priority;
 } backends[32];
+CeedPragmaThreadPrivate(backends)
 static size_t num_backends;
+CeedPragmaThreadPrivate(num_backends)
 
 #define CEED_FTABLE_ENTRY(class, method)                     \
   {                                                          \
