diff --git a/fem/fe_coll.cpp b/fem/fe_coll.cpp
index 483fb9b8f..4322a0379 100644
--- a/fem/fe_coll.cpp
+++ b/fem/fe_coll.cpp
@@ -87,6 +87,16 @@ int FiniteElementCollection::GetDerivMapType(int dim) const
    return FiniteElement::UNKNOWN_MAP_TYPE;
 }
 
+int FiniteElementCollection::GetVDim(int dim) const
+{
+   const FiniteElement *fe = FiniteElementForDim(dim);
+   if (fe)
+   {
+      return fe->GetVDim();
+   }
+   return 0;
+}
+
 int FiniteElementCollection::HasFaceDofs(Geometry::Type geom, int p) const
 {
    switch (geom)
diff --git a/fem/fe_coll.hpp b/fem/fe_coll.hpp
index 86c1f4e66..1efd9bffc 100644
--- a/fem/fe_coll.hpp
+++ b/fem/fe_coll.hpp
@@ -56,8 +56,7 @@ public:
        @note Repeatedly calls FiniteElementForGeometry in the order defined in
        the Geometry::Type enumeration.
    */
-   virtual const FiniteElement *
-   FiniteElementForDim(int dim) const;
+   virtual const FiniteElement *FiniteElementForDim(int dim) const;
 
    virtual int DofForGeometry(Geometry::Type GeomType) const = 0;
 
@@ -77,7 +76,7 @@ public:
    virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
                                              int Or) const = 0;
 
-   virtual const char * Name() const { return "Undefined"; }
+   virtual const char *Name() const { return "Undefined"; }
 
    virtual int GetContType() const = 0;
 
@@ -85,11 +84,12 @@ public:
        corresponding methods of the FiniteElement base class.
        @{
    */
-   virtual int GetRangeType(int dim) const;
-   virtual int GetDerivRangeType(int dim) const;
-   virtual int GetMapType(int dim) const;
-   virtual int GetDerivType(int dim) const;
-   virtual int GetDerivMapType(int dim) const;
+   int GetRangeType(int dim) const;
+   int GetDerivRangeType(int dim) const;
+   int GetMapType(int dim) const;
+   int GetDerivType(int dim) const;
+   int GetDerivMapType(int dim) const;
+   int GetVDim(int dim) const;
    /** @} */
 
    int HasFaceDofs(Geometry::Type geom, int p) const;
@@ -258,7 +258,6 @@ protected:
 /// Arbitrary order H1-conforming (continuous) finite elements.
 class H1_FECollection : public FiniteElementCollection
 {
-
 protected:
    int dim, b_type;
    char h1_name[32];
@@ -270,25 +269,29 @@ public:
    explicit H1_FECollection(const int p, const int dim = 3,
                             const int btype = BasisType::GaussLobatto);
 
-   virtual const FiniteElement *FiniteElementForGeometry(
-      Geometry::Type GeomType) const;
-   virtual int DofForGeometry(Geometry::Type GeomType) const
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
+
+   int DofForGeometry(Geometry::Type GeomType) const override
    { return H1_dof[GeomType]; }
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
 
-   virtual const char *Name() const { return h1_name; }
-   virtual int GetContType() const { return CONTINUOUS; }
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
+
+   const char *Name() const override { return h1_name; }
+
+   int GetContType() const override { return CONTINUOUS; }
+
    int GetBasisType() const { return b_type; }
 
-   FiniteElementCollection *GetTraceCollection() const;
+   FiniteElementCollection *GetTraceCollection() const override;
 
    /// Get the Cartesian to local H1 dof map
    const int *GetDofMap(Geometry::Type GeomType) const;
    /// Variable order version of GetDofMap
    const int *GetDofMap(Geometry::Type GeomType, int p) const;
 
-   FiniteElementCollection* Clone(int p) const
+   FiniteElementCollection *Clone(int p) const override
    { return new H1_FECollection(p, dim, b_type); }
 
    virtual ~H1_FECollection();
@@ -300,17 +303,16 @@ class H1Pos_FECollection : public H1_FECollection
 {
 public:
    explicit H1Pos_FECollection(const int p, const int dim = 3)
-      : H1_FECollection(p, dim, BasisType::Positive) { }
+      : H1_FECollection(p, dim, BasisType::Positive) {}
 };
 
-
 /** Arbitrary order H1-conforming (continuous) serendipity finite elements;
     Current implementation works in 2D only; 3D version is in development. */
 class H1Ser_FECollection : public H1_FECollection
 {
 public:
    explicit H1Ser_FECollection(const int p, const int dim = 2)
-      : H1_FECollection(p, dim, BasisType::Serendipity) { };
+      : H1_FECollection(p, dim, BasisType::Serendipity) {}
 };
 
 /** @brief Arbitrary order "H^{1/2}-conforming" trace finite elements defined on
@@ -343,9 +345,10 @@ public:
                    const int btype = BasisType::GaussLegendre,
                    const int map_type = FiniteElement::VALUE);
 
-   virtual const FiniteElement *FiniteElementForGeometry(
-      Geometry::Type GeomType) const;
-   virtual int DofForGeometry(Geometry::Type GeomType) const
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
+
+   int DofForGeometry(Geometry::Type GeomType) const override
    {
       if (L2_Elements[GeomType])
       {
@@ -353,21 +356,23 @@ public:
       }
       return 0;
    }
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
-   virtual const char *Name() const { return d_name; }
 
-   virtual int GetContType() const { return DISCONTINUOUS; }
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
 
-   virtual const FiniteElement *TraceFiniteElementForGeometry(
-      Geometry::Type GeomType) const
+   const char *Name() const override { return d_name; }
+
+   int GetContType() const override { return DISCONTINUOUS; }
+
+   const FiniteElement *
+   TraceFiniteElementForGeometry(Geometry::Type GeomType) const override
    {
       return Tr_Elements[GeomType];
    }
 
    int GetBasisType() const { return b_type; }
 
-   FiniteElementCollection* Clone(int p) const
+   FiniteElementCollection *Clone(int p) const override
    { return new L2_FECollection(p, dim, b_type, m_type); }
 
    virtual ~L2_FECollection();
@@ -409,20 +414,25 @@ public:
                    const int cb_type = BasisType::GaussLobatto,
                    const int ob_type = BasisType::GaussLegendre);
 
-   virtual const FiniteElement *FiniteElementForGeometry(
-      Geometry::Type GeomType) const;
-   virtual int DofForGeometry(Geometry::Type GeomType) const
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
+
+   int DofForGeometry(Geometry::Type GeomType) const override
    { return RT_dof[GeomType]; }
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
-   virtual const char *Name() const { return rt_name; }
-   virtual int GetContType() const { return NORMAL; }
-   FiniteElementCollection *GetTraceCollection() const;
+
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
+
+   const char *Name() const override { return rt_name; }
+
+   int GetContType() const override { return NORMAL; }
+
+   FiniteElementCollection *GetTraceCollection() const override;
 
    int GetClosedBasisType() const { return cb_type; }
    int GetOpenBasisType() const { return ob_type; }
 
-   FiniteElementCollection* Clone(int p) const
+   FiniteElementCollection *Clone(int p) const override
    { return new RT_FECollection(p, dim, cb_type, ob_type); }
 
    virtual ~RT_FECollection();
@@ -467,26 +477,28 @@ public:
                    const int cb_type = BasisType::GaussLobatto,
                    const int ob_type = BasisType::GaussLegendre);
 
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
 
-   virtual int DofForGeometry(Geometry::Type GeomType) const
+   int DofForGeometry(Geometry::Type GeomType) const override
    { return ND_dof[GeomType]; }
 
-   virtual StatelessDofTransformation *
-   DofTransformationForGeometry(Geometry::Type GeomType) const;
+   StatelessDofTransformation *
+   DofTransformationForGeometry(Geometry::Type GeomType) const override;
 
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
+
+   const char *Name() const override { return nd_name; }
 
-   virtual const char *Name() const { return nd_name; }
-   virtual int GetContType() const { return TANGENTIAL; }
-   FiniteElementCollection *GetTraceCollection() const;
+   int GetContType() const override { return TANGENTIAL; }
+
+   FiniteElementCollection *GetTraceCollection() const override;
 
    int GetClosedBasisType() const { return cb_type; }
    int GetOpenBasisType() const { return ob_type; }
 
-   FiniteElementCollection* Clone(int p) const
+   FiniteElementCollection *Clone(int p) const override
    { return new ND_FECollection(p, dim, cb_type, ob_type); }
 
    virtual ~ND_FECollection();
@@ -516,16 +528,21 @@ public:
                        const int cb_type = BasisType::GaussLobatto,
                        const int ob_type = BasisType::GaussLegendre);
 
-   virtual const FiniteElement *FiniteElementForGeometry(Geometry::Type GeomType)
-   const
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override
    { return ND_Elements[GeomType]; }
-   virtual int DofForGeometry(Geometry::Type GeomType) const
+
+   int DofForGeometry(Geometry::Type GeomType) const override
    { return ND_dof[GeomType]; }
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
-   virtual const char *Name() const { return nd_name; }
-   virtual int GetContType() const { return TANGENTIAL; }
-   FiniteElementCollection *GetTraceCollection() const;
+
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
+
+   const char *Name() const override { return nd_name; }
+
+   int GetContType() const override { return TANGENTIAL; }
+
+   FiniteElementCollection *GetTraceCollection() const override;
 
    virtual ~ND_R1D_FECollection();
 };
@@ -543,16 +560,21 @@ public:
                        const int cb_type = BasisType::GaussLobatto,
                        const int ob_type = BasisType::GaussLegendre);
 
-   virtual const FiniteElement *FiniteElementForGeometry(Geometry::Type GeomType)
-   const
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override
    { return RT_Elements[GeomType]; }
-   virtual int DofForGeometry(Geometry::Type GeomType) const
+
+   int DofForGeometry(Geometry::Type GeomType) const override
    { return RT_dof[GeomType]; }
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
-   virtual const char *Name() const { return rt_name; }
-   virtual int GetContType() const { return NORMAL; }
-   FiniteElementCollection *GetTraceCollection() const;
+
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
+
+   const char *Name() const override { return rt_name; }
+
+   int GetContType() const override { return NORMAL; }
+
+   FiniteElementCollection *GetTraceCollection() const override;
 
    virtual ~RT_R1D_FECollection();
 };
@@ -571,16 +593,21 @@ public:
                        const int cb_type = BasisType::GaussLobatto,
                        const int ob_type = BasisType::GaussLegendre);
 
-   virtual const FiniteElement *FiniteElementForGeometry(Geometry::Type GeomType)
-   const
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override
    { return ND_Elements[GeomType]; }
-   virtual int DofForGeometry(Geometry::Type GeomType) const
+
+   int DofForGeometry(Geometry::Type GeomType) const override
    { return ND_dof[GeomType]; }
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
-   virtual const char *Name() const { return nd_name; }
-   virtual int GetContType() const { return TANGENTIAL; }
-   FiniteElementCollection *GetTraceCollection() const;
+
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
+
+   const char *Name() const override { return nd_name; }
+
+   int GetContType() const override { return TANGENTIAL; }
+
+   FiniteElementCollection *GetTraceCollection() const override;
 
    virtual ~ND_R2D_FECollection();
 };
@@ -620,16 +647,21 @@ public:
                        const int cb_type = BasisType::GaussLobatto,
                        const int ob_type = BasisType::GaussLegendre);
 
-   virtual const FiniteElement *FiniteElementForGeometry(Geometry::Type GeomType)
-   const
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override
    { return RT_Elements[GeomType]; }
-   virtual int DofForGeometry(Geometry::Type GeomType) const
+
+   int DofForGeometry(Geometry::Type GeomType) const override
    { return RT_dof[GeomType]; }
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
-   virtual const char *Name() const { return rt_name; }
-   virtual int GetContType() const { return NORMAL; }
-   FiniteElementCollection *GetTraceCollection() const;
+
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
+
+   const char *Name() const override { return rt_name; }
+
+   int GetContType() const override { return NORMAL; }
+
+   FiniteElementCollection *GetTraceCollection() const override;
 
    virtual ~RT_R2D_FECollection();
 };
@@ -685,24 +717,23 @@ public:
        positive number for fixed order, or VariableOrder. */
    void SetOrder(int Order) const;
 
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
 
-   virtual int DofForGeometry(Geometry::Type GeomType) const;
+   int DofForGeometry(Geometry::Type GeomType) const override;
 
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
 
-   virtual const char *Name() const { return name; }
+   const char *Name() const override { return name; }
 
-   virtual int GetContType() const { return CONTINUOUS; }
+   int GetContType() const override { return CONTINUOUS; }
 
-   FiniteElementCollection *GetTraceCollection() const;
+   FiniteElementCollection *GetTraceCollection() const override;
 
    virtual ~NURBSFECollection();
 };
 
-
 /// Piecewise-(bi/tri)linear continuous finite elements.
 class LinearFECollection : public FiniteElementCollection
 {
@@ -716,19 +747,19 @@ private:
    const LinearWedgeFiniteElement WedgeFE;
    const LinearPyramidFiniteElement PyramidFE;
 public:
-   LinearFECollection() : FiniteElementCollection(1) { }
+   LinearFECollection() : FiniteElementCollection(1) {}
 
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
 
-   virtual int DofForGeometry(Geometry::Type GeomType) const;
+   int DofForGeometry(Geometry::Type GeomType) const override;
 
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
 
-   virtual const char * Name() const { return "Linear"; }
+   const char *Name() const override { return "Linear"; }
 
-   virtual int GetContType() const { return CONTINUOUS; }
+   int GetContType() const override { return CONTINUOUS; }
 };
 
 /// Piecewise-(bi)quadratic continuous finite elements.
@@ -745,19 +776,19 @@ private:
 
 public:
    QuadraticFECollection()
-      : FiniteElementCollection(2), ParallelepipedFE(2), WedgeFE(2) { }
+      : FiniteElementCollection(2), ParallelepipedFE(2), WedgeFE(2) {}
 
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
 
-   virtual int DofForGeometry(Geometry::Type GeomType) const;
+   int DofForGeometry(Geometry::Type GeomType) const override;
 
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
 
-   virtual const char * Name() const { return "Quadratic"; }
+   const char *Name() const override { return "Quadratic"; }
 
-   virtual int GetContType() const { return CONTINUOUS; }
+   int GetContType() const override { return CONTINUOUS; }
 };
 
 /// Version of QuadraticFECollection with positive basis functions.
@@ -768,19 +799,19 @@ private:
    const BiQuadPos2DFiniteElement QuadrilateralFE;
 
 public:
-   QuadraticPosFECollection() : FiniteElementCollection(2) { }
+   QuadraticPosFECollection() : FiniteElementCollection(2) {}
 
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
 
-   virtual int DofForGeometry(Geometry::Type GeomType) const;
+   int DofForGeometry(Geometry::Type GeomType) const override;
 
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
 
-   virtual const char * Name() const { return "QuadraticPos"; }
+   const char *Name() const override { return "QuadraticPos"; }
 
-   virtual int GetContType() const { return CONTINUOUS; }
+   int GetContType() const override { return CONTINUOUS; }
 };
 
 /// Piecewise-(bi)cubic continuous finite elements.
@@ -799,19 +830,19 @@ public:
    CubicFECollection()
       : FiniteElementCollection(3),
         ParallelepipedFE(3), WedgeFE(3, BasisType::ClosedUniform)
-   { }
+   {}
 
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
 
-   virtual int DofForGeometry(Geometry::Type GeomType) const;
+   int DofForGeometry(Geometry::Type GeomType) const override;
 
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
 
-   virtual const char * Name() const { return "Cubic"; }
+   const char *Name() const override { return "Cubic"; }
 
-   virtual int GetContType() const { return CONTINUOUS; }
+   int GetContType() const override { return CONTINUOUS; }
 };
 
 /// Crouzeix-Raviart nonconforming elements in 2D.
@@ -822,19 +853,19 @@ private:
    const CrouzeixRaviartFiniteElement TriangleFE;
    const CrouzeixRaviartQuadFiniteElement QuadrilateralFE;
 public:
-   CrouzeixRaviartFECollection() : FiniteElementCollection(1), SegmentFE(1) { }
+   CrouzeixRaviartFECollection() : FiniteElementCollection(1), SegmentFE(1) {}
 
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
 
-   virtual int DofForGeometry(Geometry::Type GeomType) const;
+   int DofForGeometry(Geometry::Type GeomType) const override;
 
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
 
-   virtual const char * Name() const { return "CrouzeixRaviart"; }
+   const char *Name() const override { return "CrouzeixRaviart"; }
 
-   virtual int GetContType() const { return DISCONTINUOUS; }
+   int GetContType() const override { return DISCONTINUOUS; }
 };
 
 /// Piecewise-linear nonconforming finite elements in 3D.
@@ -847,22 +878,21 @@ private:
    const RotTriLinearHexFiniteElement ParallelepipedFE;
 
 public:
-   LinearNonConf3DFECollection() : FiniteElementCollection(1) { }
+   LinearNonConf3DFECollection() : FiniteElementCollection(1) {}
 
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
 
-   virtual int DofForGeometry(Geometry::Type GeomType) const;
+   int DofForGeometry(Geometry::Type GeomType) const override;
 
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
 
-   virtual const char * Name() const { return "LinearNonConf3D"; }
+   const char *Name() const override { return "LinearNonConf3D"; }
 
-   virtual int GetContType() const { return DISCONTINUOUS; }
+   int GetContType() const override { return DISCONTINUOUS; }
 };
 
-
 /** @brief First order Raviart-Thomas finite elements in 2D. This class is kept
     only for backward compatibility, consider using RT_FECollection instead. */
 class RT0_2DFECollection : public FiniteElementCollection
@@ -872,19 +902,19 @@ private:
    const RT0TriangleFiniteElement TriangleFE;
    const RT0QuadFiniteElement QuadrilateralFE;
 public:
-   RT0_2DFECollection() : FiniteElementCollection(1), SegmentFE(0) { }
+   RT0_2DFECollection() : FiniteElementCollection(1), SegmentFE(0) {}
 
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
 
-   virtual int DofForGeometry(Geometry::Type GeomType) const;
+   int DofForGeometry(Geometry::Type GeomType) const override;
 
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
 
-   virtual const char * Name() const { return "RT0_2D"; }
+   const char *Name() const override { return "RT0_2D"; }
 
-   virtual int GetContType() const { return NORMAL; }
+   int GetContType() const override { return NORMAL; }
 };
 
 /** @brief Second order Raviart-Thomas finite elements in 2D. This class is kept
@@ -896,19 +926,19 @@ private:
    const RT1TriangleFiniteElement TriangleFE;
    const RT1QuadFiniteElement QuadrilateralFE;
 public:
-   RT1_2DFECollection() : FiniteElementCollection(2) { }
+   RT1_2DFECollection() : FiniteElementCollection(2) {}
 
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
 
-   virtual int DofForGeometry(Geometry::Type GeomType) const;
+   int DofForGeometry(Geometry::Type GeomType) const override;
 
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
 
-   virtual const char * Name() const { return "RT1_2D"; }
+   const char *Name() const override { return "RT1_2D"; }
 
-   virtual int GetContType() const { return NORMAL; }
+   int GetContType() const override { return NORMAL; }
 };
 
 /** @brief Third order Raviart-Thomas finite elements in 2D. This class is kept
@@ -920,19 +950,19 @@ private:
    const RT2TriangleFiniteElement TriangleFE;
    const RT2QuadFiniteElement QuadrilateralFE;
 public:
-   RT2_2DFECollection() : FiniteElementCollection(3) { }
+   RT2_2DFECollection() : FiniteElementCollection(3) {}
 
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
 
-   virtual int DofForGeometry(Geometry::Type GeomType) const;
+   int DofForGeometry(Geometry::Type GeomType) const override;
 
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
 
-   virtual const char * Name() const { return "RT2_2D"; }
+   const char *Name() const override { return "RT2_2D"; }
 
-   virtual int GetContType() const { return NORMAL; }
+   int GetContType() const override { return NORMAL; }
 };
 
 /** @brief Piecewise-constant discontinuous finite elements in 2D. This class is
@@ -944,19 +974,19 @@ private:
    const P0TriangleFiniteElement TriangleFE;
    const P0QuadFiniteElement QuadrilateralFE;
 public:
-   Const2DFECollection() : FiniteElementCollection(0) { }
+   Const2DFECollection() : FiniteElementCollection(0) {}
 
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
 
-   virtual int DofForGeometry(Geometry::Type GeomType) const;
+   int DofForGeometry(Geometry::Type GeomType) const override;
 
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
 
-   virtual const char * Name() const { return "Const2D"; }
+   const char *Name() const override { return "Const2D"; }
 
-   virtual int GetContType() const { return DISCONTINUOUS; }
+   int GetContType() const override { return DISCONTINUOUS; }
 };
 
 /** @brief Piecewise-linear discontinuous finite elements in 2D. This class is
@@ -969,19 +999,19 @@ private:
    const BiLinear2DFiniteElement QuadrilateralFE;
 
 public:
-   LinearDiscont2DFECollection() : FiniteElementCollection(1) { }
+   LinearDiscont2DFECollection() : FiniteElementCollection(1) {}
 
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
 
-   virtual int DofForGeometry(Geometry::Type GeomType) const;
+   int DofForGeometry(Geometry::Type GeomType) const override;
 
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
 
-   virtual const char * Name() const { return "LinearDiscont2D"; }
+   const char *Name() const override { return "LinearDiscont2D"; }
 
-   virtual int GetContType() const { return DISCONTINUOUS; }
+   int GetContType() const override { return DISCONTINUOUS; }
 };
 
 /// Version of LinearDiscont2DFECollection with dofs in the Gaussian points.
@@ -993,19 +1023,19 @@ private:
    const GaussBiLinear2DFiniteElement QuadrilateralFE;
 
 public:
-   GaussLinearDiscont2DFECollection() : FiniteElementCollection(1) { }
+   GaussLinearDiscont2DFECollection() : FiniteElementCollection(1) {}
 
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
 
-   virtual int DofForGeometry(Geometry::Type GeomType) const;
+   int DofForGeometry(Geometry::Type GeomType) const override;
 
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
 
-   virtual const char * Name() const { return "GaussLinearDiscont2D"; }
+   const char *Name() const override { return "GaussLinearDiscont2D"; }
 
-   virtual int GetContType() const { return DISCONTINUOUS; }
+   int GetContType() const override { return DISCONTINUOUS; }
 };
 
 /// Linear (P1) finite elements on quadrilaterals.
@@ -1014,14 +1044,19 @@ class P1OnQuadFECollection : public FiniteElementCollection
 private:
    const P1OnQuadFiniteElement QuadrilateralFE;
 public:
-   P1OnQuadFECollection() : FiniteElementCollection(1) { }
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
-   virtual int DofForGeometry(Geometry::Type GeomType) const;
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
-   virtual const char * Name() const { return "P1OnQuad"; }
-   virtual int GetContType() const { return DISCONTINUOUS; }
+   P1OnQuadFECollection() : FiniteElementCollection(1) {}
+
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
+
+   int DofForGeometry(Geometry::Type GeomType) const override;
+
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
+
+   const char *Name() const override { return "P1OnQuad"; }
+
+   int GetContType() const override { return DISCONTINUOUS; }
 };
 
 /** @brief Piecewise-quadratic discontinuous finite elements in 2D. This class
@@ -1034,18 +1069,19 @@ private:
    const BiQuad2DFiniteElement QuadrilateralFE;
 
 public:
-   QuadraticDiscont2DFECollection() : FiniteElementCollection(2) { }
+   QuadraticDiscont2DFECollection() : FiniteElementCollection(2) {}
 
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
 
-   virtual int DofForGeometry(Geometry::Type GeomType) const;
+   int DofForGeometry(Geometry::Type GeomType) const override;
 
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
+
+   const char *Name() const override { return "QuadraticDiscont2D"; }
 
-   virtual const char * Name() const { return "QuadraticDiscont2D"; }
-   virtual int GetContType() const { return DISCONTINUOUS; }
+   int GetContType() const override { return DISCONTINUOUS; }
 };
 
 /// Version of QuadraticDiscont2DFECollection with positive basis functions.
@@ -1055,15 +1091,20 @@ private:
    const BiQuadPos2DFiniteElement QuadrilateralFE;
 
 public:
-   QuadraticPosDiscont2DFECollection() : FiniteElementCollection(2) { }
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
-   virtual int DofForGeometry(Geometry::Type GeomType) const;
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const
+   QuadraticPosDiscont2DFECollection() : FiniteElementCollection(2) {}
+
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
+
+   int DofForGeometry(Geometry::Type GeomType) const override;
+
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override
    { return NULL; }
-   virtual const char * Name() const { return "QuadraticPosDiscont2D"; }
-   virtual int GetContType() const { return DISCONTINUOUS; }
+
+   const char *Name() const override { return "QuadraticPosDiscont2D"; }
+
+   int GetContType() const override { return DISCONTINUOUS; }
 };
 
 /// Version of QuadraticDiscont2DFECollection with dofs in the Gaussian points.
@@ -1075,18 +1116,19 @@ private:
    const GaussBiQuad2DFiniteElement QuadrilateralFE;
 
 public:
-   GaussQuadraticDiscont2DFECollection() : FiniteElementCollection(2) { }
+   GaussQuadraticDiscont2DFECollection() : FiniteElementCollection(2) {}
 
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
 
-   virtual int DofForGeometry(Geometry::Type GeomType) const;
+   int DofForGeometry(Geometry::Type GeomType) const override;
 
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
 
-   virtual const char * Name() const { return "GaussQuadraticDiscont2D"; }
-   virtual int GetContType() const { return DISCONTINUOUS; }
+   const char *Name() const override { return "GaussQuadraticDiscont2D"; }
+
+   int GetContType() const override { return DISCONTINUOUS; }
 };
 
 /** @brief Piecewise-cubic discontinuous finite elements in 2D. This class is
@@ -1099,18 +1141,19 @@ private:
    const BiCubic2DFiniteElement QuadrilateralFE;
 
 public:
-   CubicDiscont2DFECollection() : FiniteElementCollection(3) { }
+   CubicDiscont2DFECollection() : FiniteElementCollection(3) {}
 
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
 
-   virtual int DofForGeometry(Geometry::Type GeomType) const;
+   int DofForGeometry(Geometry::Type GeomType) const override;
 
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
+
+   const char *Name() const override { return "CubicDiscont2D"; }
 
-   virtual const char * Name() const { return "CubicDiscont2D"; }
-   virtual int GetContType() const { return DISCONTINUOUS; }
+   int GetContType() const override { return DISCONTINUOUS; }
 };
 
 /** @brief Piecewise-constant discontinuous finite elements in 3D. This class is
@@ -1125,18 +1168,19 @@ private:
    const P0PyrFiniteElement PyramidFE;
 
 public:
-   Const3DFECollection() : FiniteElementCollection(0) { }
+   Const3DFECollection() : FiniteElementCollection(0) {}
 
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
 
-   virtual int DofForGeometry(Geometry::Type GeomType) const;
+   int DofForGeometry(Geometry::Type GeomType) const override;
 
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
 
-   virtual const char * Name() const { return "Const3D"; }
-   virtual int GetContType() const { return DISCONTINUOUS; }
+   const char *Name() const override { return "Const3D"; }
+
+   int GetContType() const override { return DISCONTINUOUS; }
 };
 
 /** @brief Piecewise-linear discontinuous finite elements in 3D. This class is
@@ -1151,18 +1195,19 @@ private:
    const TriLinear3DFiniteElement ParallelepipedFE;
 
 public:
-   LinearDiscont3DFECollection() : FiniteElementCollection(1) { }
+   LinearDiscont3DFECollection() : FiniteElementCollection(1) {}
 
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
 
-   virtual int DofForGeometry(Geometry::Type GeomType) const;
+   int DofForGeometry(Geometry::Type GeomType) const override;
 
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
+
+   const char *Name() const override { return "LinearDiscont3D"; }
 
-   virtual const char * Name() const { return "LinearDiscont3D"; }
-   virtual int GetContType() const { return DISCONTINUOUS; }
+   int GetContType() const override { return DISCONTINUOUS; }
 };
 
 /** @brief Piecewise-quadratic discontinuous finite elements in 3D. This class
@@ -1176,18 +1221,19 @@ private:
 
 public:
    QuadraticDiscont3DFECollection()
-      : FiniteElementCollection(2), ParallelepipedFE(2) { }
+      : FiniteElementCollection(2), ParallelepipedFE(2) {}
 
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
 
-   virtual int DofForGeometry(Geometry::Type GeomType) const;
+   int DofForGeometry(Geometry::Type GeomType) const override;
 
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
 
-   virtual const char * Name() const { return "QuadraticDiscont3D"; }
-   virtual int GetContType() const { return DISCONTINUOUS; }
+   const char *Name() const override { return "QuadraticDiscont3D"; }
+
+   int GetContType() const override { return DISCONTINUOUS; }
 };
 
 /// Finite element collection on a macro-element.
@@ -1202,18 +1248,19 @@ private:
    const RefinedTriLinear3DFiniteElement ParallelepipedFE;
 
 public:
-   RefinedLinearFECollection() : FiniteElementCollection(1) { }
+   RefinedLinearFECollection() : FiniteElementCollection(1) {}
 
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
 
-   virtual int DofForGeometry(Geometry::Type GeomType) const;
+   int DofForGeometry(Geometry::Type GeomType) const override;
 
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
+
+   const char *Name() const override { return "RefinedLinear"; }
 
-   virtual const char * Name() const { return "RefinedLinear"; }
-   virtual int GetContType() const { return CONTINUOUS; }
+   int GetContType() const override { return CONTINUOUS; }
 };
 
 /** @brief Lowest order Nedelec finite elements in 3D. This class is kept only
@@ -1228,18 +1275,19 @@ private:
    const Nedelec1PyrFiniteElement PyramidFE;
 
 public:
-   ND1_3DFECollection() : FiniteElementCollection(1) { }
+   ND1_3DFECollection() : FiniteElementCollection(1) {}
 
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
 
-   virtual int DofForGeometry(Geometry::Type GeomType) const;
+   int DofForGeometry(Geometry::Type GeomType) const override;
 
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
 
-   virtual const char * Name() const { return "ND1_3D"; }
-   virtual int GetContType() const { return TANGENTIAL; }
+   const char *Name() const override { return "ND1_3D"; }
+
+   int GetContType() const override { return TANGENTIAL; }
 };
 
 /** @brief First order Raviart-Thomas finite elements in 3D. This class is kept
@@ -1254,18 +1302,19 @@ private:
    const RT0WdgFiniteElement WedgeFE;
    const RT0PyrFiniteElement PyramidFE;
 public:
-   RT0_3DFECollection() : FiniteElementCollection(1) { }
+   RT0_3DFECollection() : FiniteElementCollection(1) {}
 
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
 
-   virtual int DofForGeometry(Geometry::Type GeomType) const;
+   int DofForGeometry(Geometry::Type GeomType) const override;
 
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
+
+   const char *Name() const override { return "RT0_3D"; }
 
-   virtual const char * Name() const { return "RT0_3D"; }
-   virtual int GetContType() const { return NORMAL; }
+   int GetContType() const override { return NORMAL; }
 };
 
 /** @brief Second order Raviart-Thomas finite elements in 3D. This class is kept
@@ -1277,18 +1326,19 @@ private:
    const BiLinear2DFiniteElement QuadrilateralFE;
    const RT1HexFiniteElement HexahedronFE;
 public:
-   RT1_3DFECollection() : FiniteElementCollection(2) { }
+   RT1_3DFECollection() : FiniteElementCollection(2) {}
 
-   virtual const FiniteElement *
-   FiniteElementForGeometry(Geometry::Type GeomType) const;
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType) const override;
 
-   virtual int DofForGeometry(Geometry::Type GeomType) const;
+   int DofForGeometry(Geometry::Type GeomType) const override;
 
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType,
-                                             int Or) const;
+   const int *DofOrderForOrientation(Geometry::Type GeomType,
+                                     int Or) const override;
 
-   virtual const char * Name() const { return "RT1_3D"; }
-   virtual int GetContType() const { return NORMAL; }
+   const char *Name() const override { return "RT1_3D"; }
+
+   int GetContType() const override { return NORMAL; }
 };
 
 /// Discontinuous collection defined locally by a given finite element.
@@ -1302,18 +1352,22 @@ private:
 public:
    Local_FECollection(const char *fe_name);
 
-   virtual const FiniteElement *FiniteElementForGeometry(
-      Geometry::Type GeomType_) const
+   const FiniteElement *
+   FiniteElementForGeometry(Geometry::Type GeomType_) const override
    { return (GeomType == GeomType_) ? Local_Element : NULL; }
-   virtual int DofForGeometry(Geometry::Type GeomType_) const
+
+   int DofForGeometry(Geometry::Type GeomType_) const override
    { return (GeomType == GeomType_) ? Local_Element->GetDof() : 0; }
-   virtual const int *DofOrderForOrientation(Geometry::Type GeomType_,
-                                             int Or) const
+
+   const int *DofOrderForOrientation(Geometry::Type GeomType_,
+                                     int Or) const override
    { return NULL; }
-   virtual const char *Name() const { return d_name; }
+
+   const char *Name() const override { return d_name; }
+
+   int GetContType() const override { return DISCONTINUOUS; }
 
    virtual ~Local_FECollection() { delete Local_Element; }
-   virtual int GetContType() const { return DISCONTINUOUS; }
 };
 
 }
diff --git a/linalg/hypre.cpp b/linalg/hypre.cpp
index fd1972f54..dfde03bf3 100644
--- a/linalg/hypre.cpp
+++ b/linalg/hypre.cpp
@@ -5269,7 +5269,6 @@ HypreAMS::HypreAMS(const HypreParMatrix &A, HypreParMatrix *G_,
    MFEM_ASSERT(y != NULL, "");
    int sdim = (z == NULL) ? 2 : 3;
    int cycle_type = 13;
-
    MakeSolver(sdim, cycle_type);
 
    HYPRE_ParVector pz = z ? static_cast<HYPRE_ParVector>(*z) : NULL;
@@ -5277,6 +5276,39 @@ HypreAMS::HypreAMS(const HypreParMatrix &A, HypreParMatrix *G_,
    HYPRE_AMSSetDiscreteGradient(ams, *G);
 }
 
+void HypreAMS::Init(ParFiniteElementSpace *edge_fespace)
+{
+   ParMesh *pmesh = edge_fespace->GetParMesh();
+   int dim = pmesh->Dimension();
+   int sdim = pmesh->SpaceDimension();
+   int cycle_type = 13;
+
+   const FiniteElementCollection *edge_fec = edge_fespace->FEColl();
+   bool trace_space = dynamic_cast<const ND_Trace_FECollection *>(edge_fec);
+   bool rt_trace_space = dynamic_cast<const RT_Trace_FECollection *>(edge_fec);
+   trace_space = trace_space || rt_trace_space;
+
+   ND_Trace_FECollection *nd_tr_fec = NULL;
+   if (rt_trace_space)
+   {
+      MFEM_VERIFY(!edge_fespace->IsVariableOrder(),
+                  "HypreAMS does not support variable order spaces");
+      nd_tr_fec = new ND_Trace_FECollection(edge_fec->GetOrder(), dim);
+      edge_fespace = new ParFiniteElementSpace(pmesh, nd_tr_fec);
+   }
+
+   int vdim = edge_fespace->FEColl()->GetVDim(trace_space ? dim - 1 : dim);
+
+   MakeSolver(std::max(sdim, vdim), cycle_type);
+   MakeGradientAndInterpolation(edge_fespace, cycle_type);
+
+   if (rt_trace_space)
+   {
+      delete edge_fespace;
+      delete nd_tr_fec;
+   }
+}
+
 void HypreAMS::MakeSolver(int sdim, int cycle_type)
 {
    int rlx_sweeps       = 1;
@@ -5330,25 +5362,18 @@ void HypreAMS::MakeSolver(int sdim, int cycle_type)
 void HypreAMS::MakeGradientAndInterpolation(
    ParFiniteElementSpace *edge_fespace, int cycle_type)
 {
-   int dim = edge_fespace->GetMesh()->Dimension();
-   int sdim = edge_fespace->GetMesh()->SpaceDimension();
    const FiniteElementCollection *edge_fec = edge_fespace->FEColl();
-
-   bool trace_space, rt_trace_space;
-   ND_Trace_FECollection *nd_tr_fec = NULL;
-   trace_space = dynamic_cast<const ND_Trace_FECollection*>(edge_fec);
-   rt_trace_space = dynamic_cast<const RT_Trace_FECollection*>(edge_fec);
-   trace_space = trace_space || rt_trace_space;
-
-   MFEM_VERIFY(!edge_fespace->IsVariableOrder(), "");
-   int p = edge_fec->GetOrder();
+   bool trace_space = dynamic_cast<const ND_Trace_FECollection *>(edge_fec);
 
    ParMesh *pmesh = edge_fespace->GetParMesh();
-   if (rt_trace_space)
-   {
-      nd_tr_fec = new ND_Trace_FECollection(p, dim);
-      edge_fespace = new ParFiniteElementSpace(pmesh, nd_tr_fec);
-   }
+   int dim = pmesh->Dimension();
+   int sdim = pmesh->SpaceDimension();
+   int vdim = edge_fespace->FEColl()->GetVDim(trace_space ? dim - 1 : dim);
+
+   // For dim = 1, ND_FECollection::GetOrder() returns p - 1
+   MFEM_VERIFY(!edge_fespace->IsVariableOrder(),
+               "HypreAMS does not support variable order spaces");
+   int p = std::max(edge_fec->GetOrder(), 1);
 
    // define the nodal linear finite element space associated with edge_fespace
    FiniteElementCollection *vert_fec;
@@ -5363,8 +5388,27 @@ void HypreAMS::MakeGradientAndInterpolation(
    ParFiniteElementSpace *vert_fespace = new ParFiniteElementSpace(pmesh,
                                                                    vert_fec);
 
-   // generate and set the vertex coordinates
-   if (p == 1 && pmesh->GetNodes() == NULL)
+   // generate and set the discrete gradient
+   ParDiscreteLinearOperator *grad;
+   grad = new ParDiscreteLinearOperator(vert_fespace, edge_fespace);
+   if (trace_space)
+   {
+      grad->AddTraceFaceInterpolator(new GradientInterpolator);
+   }
+   else
+   {
+      grad->AddDomainInterpolator(new GradientInterpolator);
+   }
+   grad->Assemble();
+   grad->Finalize();
+   G = grad->ParallelAssemble();
+   HYPRE_AMSSetDiscreteGradient(ams, *G);
+   delete grad;
+
+   // generate and set the vertex coordinates or Nedelec interpolation matrices
+   x = y = z = NULL;
+   Pi = Pix = Piy = Piz = NULL;
+   if (p == 1 && pmesh->GetNodes() == NULL && vdim <= sdim)
    {
       ParGridFunction x_coord(vert_fespace);
       ParGridFunction y_coord(vert_fespace);
@@ -5400,34 +5444,9 @@ void HypreAMS::MakeGradientAndInterpolation(
    }
    else
    {
-      x = NULL;
-      y = NULL;
-      z = NULL;
-   }
-
-   // generate and set the discrete gradient
-   ParDiscreteLinearOperator *grad;
-   grad = new ParDiscreteLinearOperator(vert_fespace, edge_fespace);
-   if (trace_space)
-   {
-      grad->AddTraceFaceInterpolator(new GradientInterpolator);
-   }
-   else
-   {
-      grad->AddDomainInterpolator(new GradientInterpolator);
-   }
-   grad->Assemble();
-   grad->Finalize();
-   G = grad->ParallelAssemble();
-   HYPRE_AMSSetDiscreteGradient(ams, *G);
-   delete grad;
-
-   // generate and set the Nedelec interpolation matrices
-   Pi = Pix = Piy = Piz = NULL;
-   if (p > 1 || pmesh->GetNodes() != NULL)
-   {
-      ParFiniteElementSpace *vert_fespace_d
-         = new ParFiniteElementSpace(pmesh, vert_fec, sdim, Ordering::byVDIM);
+      ParFiniteElementSpace *vert_fespace_d =
+         new ParFiniteElementSpace(pmesh, vert_fec, std::max(sdim, vdim),
+                                   Ordering::byVDIM);
 
       ParDiscreteLinearOperator *id_ND;
       id_ND = new ParDiscreteLinearOperator(vert_fespace_d, edge_fespace);
@@ -5451,8 +5470,8 @@ void HypreAMS::MakeGradientAndInterpolation(
          Array2D<HypreParMatrix *> Pi_blocks;
          id_ND->GetParBlocks(Pi_blocks);
          Pix = Pi_blocks(0,0);
-         if (sdim >= 2) { Piy = Pi_blocks(0,1); }
-         if (sdim == 3) { Piz = Pi_blocks(0,2); }
+         if (std::max(sdim, vdim) >= 2) { Piy = Pi_blocks(0,1); }
+         if (std::max(sdim, vdim) == 3) { Piz = Pi_blocks(0,2); }
       }
 
       delete id_ND;
@@ -5468,20 +5487,6 @@ void HypreAMS::MakeGradientAndInterpolation(
 
    delete vert_fespace;
    delete vert_fec;
-
-   if (rt_trace_space)
-   {
-      delete edge_fespace;
-      delete nd_tr_fec;
-   }
-}
-
-void HypreAMS::Init(ParFiniteElementSpace *edge_fespace)
-{
-   int cycle_type = 13;
-   int sdim = edge_fespace->GetMesh()->SpaceDimension();
-   MakeSolver(sdim, cycle_type);
-   MakeGradientAndInterpolation(edge_fespace, cycle_type);
 }
 
 void HypreAMS::ResetAMSPrecond()
diff --git a/linalg/hypre.hpp b/linalg/hypre.hpp
index 913bdb2d0..d727c42cc 100644
--- a/linalg/hypre.hpp
+++ b/linalg/hypre.hpp
@@ -1755,6 +1755,10 @@ private:
    void MakeGradientAndInterpolation(ParFiniteElementSpace *edge_fespace,
                                      int cycle_type);
 
+   // Recreates another AMS solver with the same options when SetOperator is
+   // called multiple times.
+   void ResetAMSPrecond();
+
    /// The underlying hypre solver object
    HYPRE_Solver ams;
    /// Vertex coordinates
@@ -1773,10 +1777,6 @@ private:
    /// Flag set if `SetPrintLevel` is called, needed in `ResetAMSPrecond`
    int print_level = 1;
 
-   // Recreates another AMS solver with the same options when SetOperator is
-   // called multiple times.
-   void ResetAMSPrecond();
-
 public:
    /// @brief Construct the AMS solver on the given edge finite element space.
    ///
